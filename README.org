* GeoSync

GeoSync is a simple command-line application that traverses a
directory of raster and vector GIS files (e.g., GeoTIFFs, Shapefiles)
and generates the necessary REST commands to add workspaces,
coveragestores, datastores, coverages, featuretypes, layers, and
layergroups for each file to a running GeoServer instance.

** Installation Requirements

- [[https://jdk.java.net][Java Development Kit (version 11+)]]
- [[https://clojure.org/guides/getting_started][Clojure CLI tools]]

** Usage

To compile and run the application, navigate to the toplevel project
directory and run:

#+begin_src sh
$ clojure -M:run
#+end_src

This will print out the following usage message:

#+begin_example
geosync: Load a nested directory tree of GeoTIFFs and Shapefiles into a running GeoServer instance.
Copyright © 2020-2021 Spatial Informatics Group, LLC.

Usage:
  -c, --config-file EDN          Path to an EDN file containing a map of configuration parameters
  -d, --data-dir DIR             Path to the directory containing your GIS files
  -g, --geoserver-rest-uri URI   URI of your GeoServer's REST extensions
  -u, --geoserver-username USER  GeoServer admin username
  -p, --geoserver-password PASS  GeoServer admin password
  -w, --geoserver-workspace WS   Workspace name to receive the new GeoServer layers
#+end_example

You can run GeoSync in one of three ways:

1. Pass all options (except -c) on the command line.

   #+begin_src sh
   $ clojure -M:run -d /data -g http://localhost:8080/geoserver/rest -u admin -p geoserver -w demo
   #+end_src

   Please note that the -d option must receive a file path that is
   available on the JVM classpath. The easiest way to accomplish this
   is to use an absolute path for your filesystem. Also note that this
   approach can not make use of the optional styles and layer-groups
   options.

2. Pass the -c option with an EDN file containing all of the other
   options formatted as an EDN map of keywords to values. You may also
   pass the optional styles and layer-groups options in this way. See
   [[file:resources/sample-config.edn][resources/sample-config.edn]] for an example.

   #+begin_src sh
   $ clojure -M:run -c resources/sample-config.edn
   #+end_src

3. Pass the -c option with an EDN config file and also pass any other
   options on the command line that should override the settings in
   the EDN file.

   #+begin_src sh
   $ clojure -M:run -c resources/sample-config.edn -w my-workspace -d /my/data/directory
   #+end_src

** Logging

You will probably want to redirect the output from these commands to a
text file for reviewing after the fact as they report each REST call
sent out from GeoSync and the corresponding response received from the
GeoServer.

#+begin_src sh
$ clojure -M:run ... &> out.txt
#+end_src

** Styles

If you make use of the styles option, any raster or vector styles
referenced in your style specs should already exist on the GeoServer
before running GeoSync. Documentation on creating styles for GeoServer
can be found here:

https://docs.geoserver.org/latest/en/user/styling/webadmin/index.html

** Using Custom Projections

If your GIS data uses a custom projection that is not known to the
GeoServer, you will need to add it manually before running GeoSync.
Documentation on adding custom projections to GeoServer can be found
here:

https://docs.geoserver.org/latest/en/user/configuration/crshandling/customcrs.html

** License and Distribution

Copyright © 2020-2021 Spatial Informatics Group, LLC.

GeoSync is distributed by Spatial Informatics Group, LLC. under the
terms of the Eclipse Public License version 2.0 (EPLv2). See
LICENSE.txt in this directory for more information.
