* GeoSync

GeoSync is a simple command-line application that traverses a
directory tree of raster and vector GIS files (e.g., GeoTIFFs,
Shapefiles) and generates the necessary REST commands to add
workspaces, coveragestores, datastores, coverages, featuretypes,
layers, and layergroups for each file to a running GeoServer instance.

** Installation Requirements

- [[https://jdk.java.net][Java Development Kit (version 11+)]]
- [[https://clojure.org/guides/getting_started][Clojure CLI tools]]
- [[https://www.postgresql.org/download][PostgreSQL (version 12)]]
- [[https://postgis.net/install][PostGIS (version 3)]]

** Application Plugin Configuration

Upon request, ~triangulum/config~ reads a file called ~config.edn~
in the toplevel directory of this repository, which contains various
user-configurable system parameters. A sample file called
~config.default.edn~ is provided with this repository to get you
started. To begin, simply copy it to ~config.edn~. Then edit
it according to the following sections.

** PostgreSQL Database Setup

*PostgreSQL* needs to be installed on the machine that will be hosting
the GeoServer to support ImageMosaic rasters. Once the PostgreSQL database
server is running on your machine, you should navigate to the toplevel
directory and run the database build command as follows:

#+begin_src sh
clojure -M:build-db build-all -d geoserver
#+end_src

This will begin by creating a new database and role called ~geoserver~
and then add the postgis extension to it. Next, the script will populate
the database with the functions that are necessary for storing and processing
GeoServer's data.

It's important to note that when you are dealing with ImageMosaic workspaces,
you must make sure to use GeoSync to deregister them. The GeoServer web UI gives
you an option to deregister workspaces using its interface, but due to the
ImageMosaic data stored in GeoSync's Postgres database, you must use GeoSync
to deregister any ImageMosaic workspaces in order to make sure the database is
updated properly.

*** Performance Settings

If you want to improve the performance of your PostgreSQL server, one
way is to visit the [[https://pgtune.leopard.in.ua/][pgtune]] website
and input your system settings. This will generate a set of configuration
options that you can add to the postgresql.conf file in your system-specific
PostgreSQL data directory.

If you would like to keep these settings separate for your own
reference, you can add them to a file called "performance.conf" that
you should place in your PostgreSQL data directory. You can then
import these settings into postgresql.conf by adding this line to the
end of that file:

#+begin_example
include = 'performance.conf'
#+end_example

Note that the PostgreSQL server will need to be restarted for these
changes to take effect.

** Quickstart

To compile and run the application, navigate to the toplevel project
directory and run:

#+begin_src sh
clojure -M:run
#+end_src

This will print out the following usage message:

#+begin_example
geosync: Load a nested directory tree of GeoTIFFs and Shapefiles into a running GeoServer instance.
Copyright Â© 2020-2023 Spatial Informatics Group, LLC.

Usage:
  -c, --config-file EDN           Path to an EDN file containing a map of these parameters
  -g, --geoserver-rest-uri URI    URI of your GeoServer's REST extensions
  -u, --geoserver-username USER   GeoServer admin username
  -p, --geoserver-password PASS   GeoServer admin password
  -w, --geoserver-workspace WS    Workspace name to receive the new GeoServer layers
  -d, --data-dir DIR              Path to the directory containing your GIS files
  -s, --style-dir DIR             Path to the directory containing your style files
  -a, --action ACTION             GeoServer action: either "add" or "remove". Required in CLI mode.
  -O, --overwrite-styles          If true, already existing styles will have their definitions overwritten
  -h, --geosync-server-host HOST  Hostname to advertise in server responses
  -P, --geosync-server-port PORT  Server port to listen on for incoming requests
  -o, --log-dir PATH              Path to log files
#+end_example

You can run GeoSync in one of three ways:

1. Pass options on the command line.

   #+begin_src sh
   # Script mode: Load (add) a single directory tree into a GeoServer workspace and exit
   clojure -M:run -g http://localhost:8080/geoserver/rest -u admin -p geoserver -w demo -d /data -a "add"

  # Script mode: Remove a single workspace from GeoServer and exit
  clojure -M:run -g http://localhost:8080/geoserver/rest -u admin -p geoserver -w demo -a "remove"

   # Server mode: Listen on a port for JSON requests (see section "Server Mode" below for more info)
   clojure -M:run -g http://localhost:8080/geoserver/rest -u admin -p geoserver -h geosync.mydomain.org -P 31337
   #+end_src

   Please note that the ~-d~ option must receive a file path that is
   available on the JVM classpath. The easiest way to accomplish this
   is to use an absolute path for your filesystem. Also note that
   without the ~-c~ option there are certain options/features that you can not
   make use of (such as ~:styles~ and ~:layer-groups~).

2. Pass the ~-c~ option with an EDN file containing all of the other
   options formatted as an EDN map of keywords to values. You may also
   pass the optional ~:styles~ and ~:layer-groups~ options in this way. See
   [[file:resources/sample-config.edn][resources/sample-config.edn]] for an example.

   #+begin_src sh
   clojure -M:run -c resources/sample-config.edn
   #+end_src

3. Pass the ~-c~ option with an EDN config file and also pass any other
   options on the command line that should override the settings in
   the EDN file.

   #+begin_src sh
   clojure -M:run -c resources/sample-config.edn -w demo -d /data
   #+end_src

** Operation Modes

GeoSync comes with two main operation modes:

* Server
* CLI

While they execute the same functions and have the same capabilities, the server mode
will listen for incoming requests on the port specified and will execute any actions,
when it receive instructions from it's callees.

The server mode is useful if you need to dynamically sync layers and styles with a GeoServer
instance, after some interesting work is done (like layers were processed).

The CLI mode is simpler, because it depends on the user to direct it's usage and targets
use cases that do not have dynamic sync requirements.

Check further details on these operation modes below.

*** Server Mode

In server-mode, GeoSync will listen for incoming requests on the port
specified with the ~-P~ option. Each request should be a single
newline-terminated JSON object matching one of these forms:

1. Add all GIS files under a directory tree to a (possibly new) workspace

#+begin_src js
{"action":             "add",
 "dataDir":            "/data",
 "geoserverWorkspace": "demo",
 "responseHost":       "localhost",
 "responsePort":       5555}
#+end_src

2. Remove all layers under a workspace(s) from GeoServer and delete the workspace(s)

The ~geoserverWorkspace~ parameter can be plain text or a regex
pattern. If a plain text string is provided, an exact match will be
performed to identify the workspace to be removed. If a regex pattern
is provided, all workspaces matching the regex will be deleted.

#+begin_src js
{"action":             "remove",
 "geoserverWorkspace": "demo",
 "responseHost":       "my.server.org",
 "responsePort":       5555}
#+end_src

Because GeoServer updates can take awhile to complete, these requests
are processed asynchronously. This means that the network connection
will be closed as soon as the incoming request is read from the
client. In order to get a response message back from the GeoSync
server about whether the requested action succeeded or failed, each
request includes ~responseHost~ and ~responsePort~ fields. After the
request has been processed, GeoSync will send a newline-terminated
JSON response there containing all of the original request fields
merged with these additional fields:

#+begin_src js
{status: 0,
 message: "GeoSync: Workspace updated.",
 responseHost: "geosync.mydomain.org",
 responsePort: 31337}
#+end_src

Note that ~responseHost~ and ~responsePort~ from the request is overriden
by the new ~responseHost~ and ~responsePort~ values that correspond to the
GeoSync server's host and port.

In this response, the status code is 0 on success, 1 on error, or 2
for a progress message. The message string will explain the success,
error, or progress state of the associated request.

GeoSync includes all request fields in the response object to enable
the client to match each asynchronous response message they receive
with the correct request that they had sent out earlier. To make this
easier, it is strongly recommended that each request include a
uniquely identifying field, such as an id or request label.

Each valid request will be processed sequentially by the GeoSync
server because GeoServer only processes REST requests in a single
thread. When multiple incoming GeoSync requests are received while one
is currently being processed, the new requests will be added to a job
queue and processed in the order in which they are received. A status
2 (progress message) response will be sent to the client notifying
them of their place in the queue. Once processed, a final status 0
(success) or 1 (error) response will be sent to the client indicating
the outcome of their request.

*** CLI Mode

The CLI mode is the simplest operation mode of GeoSync. It allows it's
user to sync on demand with target GeoServer.

The CLI mode can `add` or `remove` synced workspaces - by using the 
configuration file or specifying the `action` on the CLI arguments.

While using GeoSync over the terminal, you can specify options using
flags and switches of the CLI itself, of by pointing to a `.edn` configuration
file. These options will be merged in run-time in order to produce the
final version of the confgiuration. Options specified in the CLI takes
precedence of the options specified in the configuration file.

In this mode, it's mandatory to specify in the configuration file or
the CLI arguments, the following arguments:

1. `geoserver-workspace`
1. `geoserver-rest-uri`
1. `geoserver-username`
1. `geoserver-password`
1. `action`

Refer to the CLI usage section on top of this document to get more details
on each argument.

** Logging

You will probably want to redirect the output from these commands to a
text file for reviewing after the fact as they report each REST call
sent out from GeoSync and the corresponding response received from the
GeoServer.

#+begin_src sh
clojure -M:run ... &> out.txt
#+end_src

Alternatively, if you pass in a path to a log directory with either ~-o~ on the
command line or via ~:log-dir~ in your ~config.edn~ file, all logs will be
redirected to the provided directory. This directory will hold up to ten different
log files where each log file corresponds to a date where GeoSync logs were output.
The format of these log files is: ~YYYY-MM-DD.log~.

** Styles

*** ~:styles~
There are a few ways to interface with GeoServer styles using GeoSync.
The most simple way is by using a ~:styles~ key-value pair in your ~.edn~
configuration file. To use this key-value pair, the value associated with the
~:styles~ key should be a vector of maps. Each map in the vector should contain
a ~:layer-pattern~ key with an associated string or regular expression. This string
or regular expression should correspond with the types of layers that you want
to apply specific vector or raster styles to. It should also either contain a
~:vector-style~ key, a ~:raster-style~ key, or both (for scenarios where similarly
named layers could either be a vector or raster layer). The values associated with
both the ~:vector-style~ and ~:raster-style~ keys can either be a string or a
vector of unique strings. Each string should correspond with the exact name of a style
that already exists on the GeoServer. Whenever GeoSync matches a layer with the
specific ~:layer-pattern~ you provided, it will automatically add any
~:vector-style~ or ~:raster-style~ you specified with these keys (depending
on the type of layer -- which will be determined automatically by GeoSync).
Please see [[file:resources/sample-config.edn][resources/sample-config.edn]]
for a concrete example of how to use the ~:styles~ key.

*** ~:style-dir~
If you don't wish to manually add any of the styles laid out in your ~:styles~
key to your GeoServer, it's possible to sync styles to GeoServer using the ~:style-dir~
key in your ~.edn~ file. When you configure a ~:style-dir~ (also available with the ~-s~
or ~--style-dir~ option in the CLI), GeoSync will recursively look up all ~.css~ files
that are present in this directory and add them to GeoServer for you. Note that
this step happens before any layers are registered, so you can leverage the use
of the ~:styles~ key without having to add any styles manually to your GeoServer.

If you don't provide a ~:style-dir~, you'll have to make sure that any styles you
use inside of the ~:styles~ key have already been manually added to the GeoServer.
Note that any styles added automatically using this key will be tied to the same
workspace that you provide via ~:geoserver-workspace~ in your ~.edn~ file (or with
~-w~ / ~--geoserver-workspace~) from the command line. If you remove that workspace,
all styles associated with that workspace will also be removed.

If you wish to sync styles to a unique "styles" workspace that isn't tied to any other layers
so that they aren't removed when you need to remove layers, you can configure your
~.edn~ file to use the ~:style-dir~ key and *not* the ~:data-dir~ key. In this case,
GeoSync would just load the CSS styles found under ~:style-dir~ into the GeoServer
under the ~:geoserver-workspace~ specified in your ~.edn~ config file. If you include
both a ~:style-dir~ and a ~:data-dir~, then your CSS styles and your GIS layers will
both be added under the same ~:geoserver-workspace~.

*** ~:overwrite-styles~
If you wish to overwrite any already existing GeoServer styles with updates to the
styles made inside of the ~.css~ files in your ~:style-dir~, you can leverage a parameter
called ~:overwrite-styles~ (also available with the ~-O~ or ~--overwrite-styles~ option in the CLI).
If set to ~true~, any GeoServer styles will be overwritten if and only if the style
already exists in the provided ~:geoserver-workspace~ and we have a style file of
the same name in ~:style-dir~. If both of these cases are hit, the GeoServer style
will be overwritten with the latest style provided in the corresponding ~.css~ file.
Defaults to ~false~ if not specified.

** Using Custom Projections

If your GIS data uses a custom projection that is not known to the
GeoServer, you will need to add it manually before running GeoSync.
Documentation on adding custom projections to GeoServer can be found
here:

https://docs.geoserver.org/latest/en/user/configuration/crshandling/customcrs.html

** ImageMosaic Support

In addition to registering individual GeoTIFFs and Shapefiles, GeoSync
can also register a directory of GeoTIFFs as a single ImageMosaic
layer. This can be particularly useful for timeseries rasters in which
your data is stored as a directory of single-band GeoTIFFs with one
file per timestep.

In order for a directory to be detected as an ImageMosaic data source
by GeoSync, it must include these three text files:

- ~datastore.properties~
- ~indexer.properties~
- ~timeregex.properties~

The required contents of these files is provided in the following
subsections.

*** ~datastore.properties~

#+begin_example
Estimated\ extends=true
jndiRefevrenceName=java\:comp/env/jdbc/postgres
validate\ connections=true
Connection\ timeout=10
SPI=org.geotools.data.postgis.PostgisNGJNDIDataStoreFactory
#+end_example

Note that ~datastore.properties~ also needs a schema property, but this
will be inserted by GeoSync by using the ~geoserverWorkspace~ attribute
from either ~config.edn~ (in script mode) or the JSON request (in server
mode).

*** indexer.properties

#+begin_example
TimeAttribute=ingestion
Schema=*the_geom\:Polygon,location\:String,ingestion\:java.util.Date
PropertyCollectors=TimestampFileNameExtractorSPI[timeregex](ingestion)
#+end_example

Note that ~indexer.properties~ also needs a Name property, but this will be inserted
by GeoSync based on the the directory structure.

*** ~timeregex.properties~

#+begin_example
regex=([0-9]{8}_[0-9]{6}),format=yyyyMMdd_HHmmss
#+end_example

This regex must match the file naming convention used for all the
timeseries GeoTIFFs in your ImageMosaic directory. The example given
above would match files with the following names:

- ~some_layer_20210801_120000~
- ~some_layer_20210801_130000~
- ~some_layer_20210801_140000~

If you use a different file naming convention for your timestamps,
make sure to update ~timeregex.properties~ accordingly.

** File Watcher

In server-mode, you may optionally specify a file path to be
monitored. Any folders added or removed with a valid directory
structure (as specified in the ~folder-name->regex~ map) will be automatically
registered or dergesitered from the GeoServer. See the ~file-watcher~
entry in [[file:resources/sample-config.edn][resources/sample-config.edn]] for an example.

Here's an explanation of the ~:file-watcher~ configuration:
- ~dir~: A path to a readable directory.
- ~folder-name->regex~: A map of folder names to regexes. The regexes are used to
                        parse the appropriate workspace name from the file path.
                        Note that for any folder name not included in this map no
                        action will be taken (even if the file watcher detects an event).

Depending on the number of files you are attempting to watch,
you will likely have to increase your ~inotify~ limit. You can find your current
~inotify~ limit by running ~cat /proc/sys/fs/inotify/max_user_watches~. To set
a new limit temporarily, run:

#+begin_src sh
sudo sysctl fs.inotify.max_user_watches=$NUMBER_OF_FILES
sudo sysctl -p
#+end_src

To make this limit permanent, run:

#+begin_src sh
echo fs.inotify.max_user_watches=$NUMBER_OF_FILES | sudo tee -a /etc/sysctl.conf
sudo sysctl -p
#+end_src

** Uber-JAR

To build GeoSync as an Uber-JAR (to the ~target~) directory, run the following:

#+begin_src sh
clojure -T:build uberjar
#+end_src

** License and Distribution

Copyright Â© 2020-2023 Spatial Informatics Group, LLC.

GeoSync is distributed by Spatial Informatics Group, LLC. under the
terms of the Eclipse Public License version 2.0 (EPLv2). See
LICENSE.txt in this directory for more information.
