* GeoSync

GeoSync is a simple command-line application that traverses a
directory tree of raster and vector GIS files (e.g., GeoTIFFs,
Shapefiles) and generates the necessary REST commands to add
workspaces, coveragestores, datastores, coverages, featuretypes,
layers, and layergroups for each file to a running GeoServer instance.

** Installation Requirements

- [[https://jdk.java.net][Java Development Kit (version 11+)]]
- [[https://clojure.org/guides/getting_started][Clojure CLI tools]]
- [[https://www.postgresql.org/download][PostgreSQL (version 12)]]
- [[https://postgis.net/install][PostGIS (version 3)]]

** Application Plugin Configuration

Upon request, triangulum/config reads a file called config.edn
in the toplevel directory of this repository, which contains various
user-configurable system parameters. A sample file called
config.default.edn is provided with this repository to get you
started. To begin, simply copy it to config.edn. Then edit
it according to the following sections.

Please note that you must replace all values surrounded with angle
brackets (e.g., "<api-key>") with actual values for the application to
work correctly.

** PostgreSQL Database Setup

*PostgreSQL* needs to be installed on the machine that will be hosting
the GeoServer to support ImageMosaic rasters. Once the PostgreSQL database
server is running on your machine, you should navigate to the toplevel
directory and run the database build command as follows:

#+begin_src sh
clojure -M:build-db build-all -d geoserver
#+end_src

This will begin by creating a new database and role called *geoserver*
and then add the postgis extension to it. Next, the script will populate
the database with the functions that are necessary for storing and processing
GeoServer's data.

*** Performance Settings

If you want to improve the performance of your PostgreSQL server, one
way is to visit the [[https://pgtune.leopard.in.ua/][pgtune]] website
and input your system settings. This will generate a set of configuration
options that you can add to the postgresql.conf file in your system-specific
PostgreSQL data directory.

If you would like to keep these settings separate for your own
reference, you can add them to a file called "performance.conf" that
you should place in your PostgreSQL data directory. You can then
import these settings into postgresql.conf by adding this line to the
end of that file:

#+begin_example
include = 'performance.conf'
#+end_example

Note that the PostgreSQL server will need to be restarted for these
changes to take effect.

** Usage

To compile and run the application, navigate to the toplevel project
directory and run:

#+begin_src sh
clojure -M:run
#+end_src

This will print out the following usage message:

#+begin_example
geosync: Load a nested directory tree of GeoTIFFs and Shapefiles into a running GeoServer instance.
Copyright Â© 2020-2021 Spatial Informatics Group, LLC.

Usage:
  -c, --config-file EDN           Path to an EDN file containing a map of these parameters
  -g, --geoserver-rest-uri URI    URI of your GeoServer's REST extensions
  -u, --geoserver-username USER   GeoServer admin username
  -p, --geoserver-password PASS   GeoServer admin password
  -w, --geoserver-workspace WS    Workspace name to receive the new GeoServer layers
  -d, --data-dir DIR              Path to the directory containing your GIS files
  -h, --geosync-server-host HOST  Hostname to advertise in server responses
  -P, --geosync-server-port PORT  Server port to listen on for incoming requests
#+end_example

You can run GeoSync in one of three ways:

1. Pass all options (except -c) on the command line.

   #+begin_src sh
   # Script mode: Load a single directory tree into a GeoServer workspace and exit
   clojure -M:run -g http://localhost:8080/geoserver/rest -u admin -p geoserver -w demo -d /data

   # Server mode: Listen on a port for JSON requests (see section "Server Mode" below for more info)
   clojure -M:run -g http://localhost:8080/geoserver/rest -u admin -p geoserver -h geosync.mydomain.org -P 31337
   #+end_src

   Please note that the -d option must receive a file path that is
   available on the JVM classpath. The easiest way to accomplish this
   is to use an absolute path for your filesystem. Also note that
   without the -c option, this approach cannot make use of the
   optional styles and layer-groups options.

2. Pass the -c option with an EDN file containing all of the other
   options formatted as an EDN map of keywords to values. You may also
   pass the optional styles and layer-groups options in this way. See
   [[file:resources/sample-config.edn][resources/sample-config.edn]] for an example.

   #+begin_src sh
   clojure -M:run -c resources/sample-config.edn
   #+end_src

3. Pass the -c option with an EDN config file and also pass any other
   options on the command line that should override the settings in
   the EDN file.

   #+begin_src sh
   clojure -M:run -c resources/sample-config.edn -w demo -d /data
   #+end_src

** Server Mode

In server-mode, GeoSync will listen for incoming requests on the port
specified with the -P option. Each request should be a single
newline-terminated JSON object matching one of these forms:

1. Add All GIS Files under a Directory Tree to a (Possibly New) Workspace

#+begin_src js
{"action":             "add",
 "dataDir":            "/data",
 "geoserverWorkspace": "demo",
 "responseHost":       "localhost",
 "responsePort":       5555}
#+end_src

2. Remove All Layers under a Workspace(s) from GeoServer and Delete the Workspace(s)

The ~geoserverWorkspace~ parameter can be plain text or a regex
pattern. If a plain text string is provided, an exact match will be
performed to identify the workspace to be removed. If a regex pattern
is provided, all workspaces matching the regex will be deleted.

#+begin_src js
{"action":             "remove",
 "geoserverWorkspace": "demo",
 "responseHost":       "my.server.org",
 "responsePort":       5555}
#+end_src

Because GeoServer updates can take awhile to complete, these requests
are processed asynchronously. This means that the network connection
will be closed as soon as the incoming request is read from the
client. In order to get a response message back from the GeoSync
server about whether the requested action succeeded or failed, each
request includes responseHost and responsePort fields. After the
request has been processed, GeoSync will send a newline-terminated
JSON response there containing all of the original request fields
merged with these additional fields:

#+begin_src js
{status: 0,
 message: "GeoSync: Workspace updated.",
 responseHost: "geosync.mydomain.org",
 responsePort: 31337}
#+end_src

Note that responseHost and responsePort from the request is overriden
by the new responseHost and responsePort values that correspond to the
GeoSync server's host and port.

In this response, the status code is 0 on success, 1 on error, or 2
for a progress message. The message string will explain the success,
error, or progress state of the associated request.

GeoSync includes all request fields in the response object to enable
the client to match each asynchronous response message they receive
with the correct request that they had sent out earlier. To make this
easier, it is strongly recommended that each request include a
uniquely identifying field, such as an id or request label.

Each valid request will be processed sequentially by the GeoSync
server because GeoServer only processes REST requests in a single
thread. When multiple incoming GeoSync requests are received while one
is currently being processed, the new requests will be added to a job
queue and processed in the order in which they are received. A status
2 (progress message) response will be sent to the client notifying
them of their place in the queue. Once processed, a final status 0
(success) or 1 (error) response will be sent to the client indicating
the outcome of their request.

** Logging

You will probably want to redirect the output from these commands to a
text file for reviewing after the fact as they report each REST call
sent out from GeoSync and the corresponding response received from the
GeoServer.

#+begin_src sh
clojure -M:run ... &> out.txt
#+end_src

** Styles

If you make use of the styles option, any raster or vector styles
referenced in your style specs should already exist on the GeoServer
before running GeoSync. Documentation on creating styles for GeoServer
can be found here:

https://docs.geoserver.org/latest/en/user/styling/webadmin/index.html

** Using Custom Projections

If your GIS data uses a custom projection that is not known to the
GeoServer, you will need to add it manually before running GeoSync.
Documentation on adding custom projections to GeoServer can be found
here:

https://docs.geoserver.org/latest/en/user/configuration/crshandling/customcrs.html

** ImageMosaic Support

In addition to registering individual GeoTIFFs and Shapefiles, GeoSync
can also register a directory of GeoTIFFs as a single ImageMosaic
layer. This can be particularly useful for timeseries rasters in which
your data is stored as a directory of single-band GeoTIFFs with one
file per timestep.

In order for a directory to be detected as an ImageMosaic data source
by GeoSync, it must include these three text files:

- datastore.properties
- indexer.properties
- timeregex.properties

The required contents of these files is provided in the following
subsections.

*** datastore.properties

#+begin_example
Estimated\ extends=true
jndiRefevrenceName=java\:comp/env/jdbc/postgres
validate\ connections=true
Connection\ timeout=10
SPI=org.geotools.data.postgis.PostgisNGJNDIDataStoreFactory
#+end_example

Note that datastore.properties also needs a schema property, but this
will be inserted by GeoSync by using the geoserverWorkspace attribute
from either config.edn (in script mode) or the JSON request (in server
mode).

*** indexer.properties

#+begin_example
TimeAttribute=ingestion
Schema=*the_geom\:Polygon,location\:String,ingestion\:java.util.Date
PropertyCollectors=TimestampFileNameExtractorSPI[timeregex](ingestion)
#+end_example

Note that indexer.properties also needs a Name property, but this will be inserted
by GeoSync based on the the directory structure.

*** timeregex.properties

#+begin_example
regex=([0-9]{8}_[0-9]{6}),format=yyyyMMdd_HHmmss
#+end_example

This regex must match the file naming convention used for all the
timeseries GeoTIFFs in your ImageMosaic directory. The example given
above would match files with the following names:

- some_layer_20210801_120000
- some_layer_20210801_130000
- some_layer_20210801_140000

If you use a different file naming convention for your timestamps,
make sure to update timeregex.properties accordingly.

** File Watcher

In server-mode, you may optionally specify a file path to be
monitored. Any folders added or removed with a valid directory
structure (as specified in the `workspace-regex` map) will be automatically
registered or dergesitered from the GeoServer. See the `file-watcher`
entry in [[file:resources/sample-config.edn][resources/sample-config.edn]] for an example.

Here's an explanation of the ~:file-watcher~ confgiuration:
- ~dir~: A path to a readable directory.
- ~workspace-regex~: A map of folder names to regexes. The regexes are used to
                     parse the appropriate workspace name from the file path.

** License and Distribution

Copyright Â© 2020-2021 Spatial Informatics Group, LLC.

GeoSync is distributed by Spatial Informatics Group, LLC. under the
terms of the Eclipse Public License version 2.0 (EPLv2). See
LICENSE.txt in this directory for more information.
